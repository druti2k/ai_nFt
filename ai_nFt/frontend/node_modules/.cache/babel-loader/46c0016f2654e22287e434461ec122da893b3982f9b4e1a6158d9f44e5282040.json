{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(approveInstructionData.span);\n  approveInstructionData.encode({\n    instruction: TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({\n  programId,\n  keys: [account, delegate, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: approveInstructionData.decode(data)\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
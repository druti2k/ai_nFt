{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uiAmountToAmount = void 0;\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst uiAmountToAmount_js_1 = require(\"../instructions/uiAmountToAmount.js\");\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nfunction uiAmountToAmount(connection, payer, mint, amount, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transaction = new web3_js_1.Transaction().add((0, uiAmountToAmount_js_1.createUiAmountToAmountInstruction)(mint, amount, programId));\n    const {\n      returnData,\n      err\n    } = (yield connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n      const data = Buffer.from(returnData.data[0], returnData.data[1]);\n      return (0, buffer_layout_utils_1.u64)().decode(data);\n    }\n    return err;\n  });\n}\nexports.uiAmountToAmount = uiAmountToAmount;\n//# sourceMappingURL=uiAmountToAmount.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
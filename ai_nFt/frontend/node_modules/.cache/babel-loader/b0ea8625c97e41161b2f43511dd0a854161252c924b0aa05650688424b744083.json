{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInitializeInstruction = createInitializeInstruction;\nexports.createUpdateFieldInstruction = createUpdateFieldInstruction;\nexports.createRemoveKeyInstruction = createRemoveKeyInstruction;\nexports.createUpdateAuthorityInstruction = createUpdateAuthorityInstruction;\nexports.createEmitInstruction = createEmitInstruction;\nconst codecs_1 = require(\"@solana/codecs\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst field_js_1 = require(\"./field.js\");\nfunction getInstructionEncoder(discriminator, dataEncoder) {\n  return (0, codecs_1.transformEncoder)((0, codecs_1.getTupleEncoder)([(0, codecs_1.getBytesEncoder)(), dataEncoder]), data => [discriminator, data]);\n}\nfunction getPublicKeyEncoder() {\n  return (0, codecs_1.transformEncoder)((0, codecs_1.fixEncoderSize)((0, codecs_1.getBytesEncoder)(), 32), publicKey => publicKey.toBytes());\n}\nfunction getStringEncoder() {\n  return (0, codecs_1.addEncoderSizePrefix)((0, codecs_1.getUtf8Encoder)(), (0, codecs_1.getU32Encoder)());\n}\nfunction createInitializeInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    mint,\n    mintAuthority,\n    name,\n    symbol,\n    uri\n  } = args;\n  return new web3_js_1.TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: updateAuthority\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: mint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: mintAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:initialize_account') */\n    210, 225, 30, 162, 88, 184, 77, 141]), (0, codecs_1.getStructEncoder)([['name', getStringEncoder()], ['symbol', getStringEncoder()], ['uri', getStringEncoder()]])).encode({\n      name,\n      symbol,\n      uri\n    }))\n  });\n}\nfunction createUpdateFieldInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    field,\n    value\n  } = args;\n  return new web3_js_1.TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:updating_field') */\n    221, 233, 49, 45, 181, 202, 220, 200]), (0, codecs_1.getStructEncoder)([['field', (0, codecs_1.getDataEnumCodec)((0, field_js_1.getFieldCodec)())], ['value', getStringEncoder()]])).encode({\n      field: (0, field_js_1.getFieldConfig)(field),\n      value\n    }))\n  });\n}\nfunction createRemoveKeyInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    key,\n    idempotent\n  } = args;\n  return new web3_js_1.TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:remove_key_ix') */\n    234, 18, 32, 56, 89, 141, 37, 181]), (0, codecs_1.getStructEncoder)([['idempotent', (0, codecs_1.getBooleanEncoder)()], ['key', getStringEncoder()]])).encode({\n      idempotent,\n      key\n    }))\n  });\n}\nfunction createUpdateAuthorityInstruction(args) {\n  const {\n    programId,\n    metadata,\n    oldAuthority,\n    newAuthority\n  } = args;\n  return new web3_js_1.TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: oldAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:update_the_authority') */\n    215, 228, 166, 228, 84, 100, 86, 123]), (0, codecs_1.getStructEncoder)([['newAuthority', getPublicKeyEncoder()]])).encode({\n      newAuthority: newAuthority !== null && newAuthority !== void 0 ? newAuthority : web3_js_1.SystemProgram.programId\n    }))\n  });\n}\nfunction createEmitInstruction(args) {\n  const {\n    programId,\n    metadata,\n    start,\n    end\n  } = args;\n  return new web3_js_1.TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: false,\n      pubkey: metadata\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:emitter') */\n    250, 166, 180, 250, 13, 12, 184, 70]), (0, codecs_1.getStructEncoder)([['start', (0, codecs_1.getOptionEncoder)((0, codecs_1.getU64Encoder)())], ['end', (0, codecs_1.getOptionEncoder)((0, codecs_1.getU64Encoder)())]])).encode({\n      start: start !== null && start !== void 0 ? start : null,\n      end: end !== null && end !== void 0 ? end : null\n    }))\n  });\n}\n//# sourceMappingURL=instruction.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
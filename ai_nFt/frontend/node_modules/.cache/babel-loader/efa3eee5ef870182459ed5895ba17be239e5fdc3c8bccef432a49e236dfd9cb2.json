{"ast":null,"code":"import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property) {\n  return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Calculate the transfer fee */\nexport function calculateFee(transferFee, preFeeAmount) {\n  const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;\n  if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {\n    return BigInt(0);\n  } else {\n    const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);\n    const rawFee = (numerator + ONE_IN_BASIS_POINTS - BigInt(1)) / ONE_IN_BASIS_POINTS;\n    const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;\n    return BigInt(fee);\n  }\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct([publicKey('transferFeeConfigAuthority'), publicKey('withdrawWithheldAuthority'), u64('withheldAmount'), transferFeeLayout('olderTransferFee'), transferFeeLayout('newerTransferFee')]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Get the fee for given epoch */\nexport function getEpochFee(transferFeeConfig, epoch) {\n  if (epoch >= transferFeeConfig.newerTransferFee.epoch) {\n    return transferFeeConfig.newerTransferFee;\n  } else {\n    return transferFeeConfig.olderTransferFee;\n  }\n}\n/** Calculate the fee for the given epoch and input amount */\nexport function calculateEpochFee(transferFeeConfig, epoch, preFeeAmount) {\n  const transferFee = getEpochFee(transferFeeConfig, epoch);\n  return calculateFee(transferFee, preFeeAmount);\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeConfigLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexport function getTransferFeeAmount(account) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n  if (extensionData !== null) {\n    return TransferFeeAmountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
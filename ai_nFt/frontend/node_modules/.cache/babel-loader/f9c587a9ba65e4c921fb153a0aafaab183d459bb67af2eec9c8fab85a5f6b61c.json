{"ast":null,"code":"import { addEncoderSizePrefix, fixEncoderSize, getBooleanEncoder, getBytesEncoder, getDataEnumCodec, getOptionEncoder, getUtf8Encoder, getStructEncoder, getTupleEncoder, getU32Encoder, getU64Encoder, transformEncoder } from '@solana/codecs';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { getFieldCodec, getFieldConfig } from './field.js';\nfunction getInstructionEncoder(discriminator, dataEncoder) {\n  return transformEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), data => [discriminator, data]);\n}\nfunction getPublicKeyEncoder() {\n  return transformEncoder(fixEncoderSize(getBytesEncoder(), 32), publicKey => publicKey.toBytes());\n}\nfunction getStringEncoder() {\n  return addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder());\n}\nexport function createInitializeInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    mint,\n    mintAuthority,\n    name,\n    symbol,\n    uri\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: updateAuthority\n    }, {\n      isSigner: false,\n      isWritable: false,\n      pubkey: mint\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: mintAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:initialize_account') */\n    210, 225, 30, 162, 88, 184, 77, 141]), getStructEncoder([['name', getStringEncoder()], ['symbol', getStringEncoder()], ['uri', getStringEncoder()]])).encode({\n      name,\n      symbol,\n      uri\n    }))\n  });\n}\nexport function createUpdateFieldInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    field,\n    value\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:updating_field') */\n    221, 233, 49, 45, 181, 202, 220, 200]), getStructEncoder([['field', getDataEnumCodec(getFieldCodec())], ['value', getStringEncoder()]])).encode({\n      field: getFieldConfig(field),\n      value\n    }))\n  });\n}\nexport function createRemoveKeyInstruction(args) {\n  const {\n    programId,\n    metadata,\n    updateAuthority,\n    key,\n    idempotent\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: updateAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:remove_key_ix') */\n    234, 18, 32, 56, 89, 141, 37, 181]), getStructEncoder([['idempotent', getBooleanEncoder()], ['key', getStringEncoder()]])).encode({\n      idempotent,\n      key\n    }))\n  });\n}\nexport function createUpdateAuthorityInstruction(args) {\n  const {\n    programId,\n    metadata,\n    oldAuthority,\n    newAuthority\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: metadata\n    }, {\n      isSigner: true,\n      isWritable: false,\n      pubkey: oldAuthority\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:update_the_authority') */\n    215, 228, 166, 228, 84, 100, 86, 123]), getStructEncoder([['newAuthority', getPublicKeyEncoder()]])).encode({\n      newAuthority: newAuthority ?? SystemProgram.programId\n    }))\n  });\n}\nexport function createEmitInstruction(args) {\n  const {\n    programId,\n    metadata,\n    start,\n    end\n  } = args;\n  return new TransactionInstruction({\n    programId,\n    keys: [{\n      isSigner: false,\n      isWritable: false,\n      pubkey: metadata\n    }],\n    data: Buffer.from(getInstructionEncoder(new Uint8Array([/* await splDiscriminate('spl_token_metadata_interface:emitter') */\n    250, 166, 180, 250, 13, 12, 184, 70]), getStructEncoder([['start', getOptionEncoder(getU64Encoder())], ['end', getOptionEncoder(getU64Encoder())]])).encode({\n      start: start ?? null,\n      end: end ?? null\n    }))\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
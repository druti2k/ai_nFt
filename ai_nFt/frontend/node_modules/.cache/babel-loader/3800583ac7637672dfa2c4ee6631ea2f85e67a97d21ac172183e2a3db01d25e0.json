{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\druti\\\\OneDrive\\\\Desktop\\\\ai_nFt\\\\ai_nFt\\\\frontend\\\\src\\\\components\\\\NFTGenerator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { PublicKey, Keypair } from '@solana/web3.js';\nimport { getAssociatedTokenAddress } from '@solana/spl-token';\nimport { AiNftBrowserClient } from '../utils/ai-nft-program';\nimport './NFTGenerator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTGenerator = ({\n  onGenerate\n}) => {\n  _s();\n  const {\n    publicKey,\n    sendTransaction\n  } = useWallet();\n  const {\n    connection\n  } = useConnection();\n  const [prompt, setPrompt] = useState('');\n  const [size, setSize] = useState('medium');\n  const [share, setShare] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isMinting, setIsMinting] = useState(false);\n  const [generatedImage, setGeneratedImage] = useState(null);\n  const [shareUrl, setShareUrl] = useState(null);\n  const [error, setError] = useState(null);\n  const [client] = useState(() => new AiNftBrowserClient(connection));\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!publicKey) {\n      setError('Please connect your wallet first');\n      return;\n    }\n    if (!prompt) {\n      setError('Please enter a prompt');\n      return;\n    }\n    setIsGenerating(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3001/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt,\n          walletAddress: publicKey.toString(),\n          size,\n          share\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to generate NFT');\n      }\n      setGeneratedImage(data.imageUri);\n      setShareUrl(data.shareUrl);\n      if (onGenerate) {\n        onGenerate(data.imageUri);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to generate NFT';\n      setError(errorMessage);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleShare = () => {\n    if (shareUrl) {\n      const shareData = {\n        title: 'Check out my AI-generated NFT!',\n        text: `Generated using AI NFT Creator: ${prompt}`,\n        url: shareUrl\n      };\n      if (navigator.share && /mobile|android|iphone/i.test(navigator.userAgent)) {\n        // Use native share on mobile devices\n        navigator.share(shareData).catch(console.error);\n      } else {\n        // Fallback to clipboard copy on desktop\n        navigator.clipboard.writeText(shareUrl);\n        alert('Share URL copied to clipboard! You can now paste it anywhere.');\n      }\n    }\n  };\n  const handleDownload = () => {\n    if (generatedImage) {\n      const link = document.createElement('a');\n      link.href = generatedImage;\n      link.download = `AI-NFT-${Date.now()}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const handleMint = async () => {\n    if (!generatedImage || !publicKey || !client) return;\n    setIsMinting(true);\n    setError(null);\n    try {\n      // Generate a new mint keypair\n      const mintKeypair = Keypair.generate();\n      const mintPubkey = mintKeypair.publicKey;\n\n      // Get token account\n      const tokenAddress = await getAssociatedTokenAddress(mintPubkey, publicKey);\n\n      // Get metadata address\n      const [metadataAddress] = await PublicKey.findProgramAddress([Buffer.from('metadata'), mintPubkey.toBuffer()], new PublicKey(process.env.REACT_APP_PROGRAM_ID || 'YOUR_PROGRAM_ID_HERE'));\n\n      // Create metadata\n      const metadata = {\n        name: `AI NFT: ${prompt.substring(0, 30)}...`,\n        symbol: 'AINFT',\n        description: prompt,\n        image: generatedImage,\n        attributes: [{\n          trait_type: 'Generator',\n          value: 'Stability AI'\n        }, {\n          trait_type: 'Size',\n          value: size\n        }, {\n          trait_type: 'Creator',\n          value: publicKey.toString()\n        }]\n      };\n\n      // Initialize NFT\n      const initTx = await client.createInitializeTransaction(publicKey, mintPubkey, tokenAddress, metadataAddress, metadata.name, metadata.symbol, JSON.stringify(metadata));\n      const signature = await sendTransaction(initTx, connection, {\n        signers: [mintKeypair]\n      });\n      await connection.confirmTransaction(signature, 'confirmed');\n\n      // Mint NFT\n      const mintTx = await client.createMintTransaction(publicKey, mintPubkey, tokenAddress, metadataAddress, Date.now().toString(), generatedImage, JSON.stringify(metadata));\n      const mintSignature = await sendTransaction(mintTx, connection);\n      await connection.confirmTransaction(mintSignature, 'confirmed');\n      alert('NFT minted successfully! Transaction signature: ' + mintSignature);\n    } catch (err) {\n      console.error('Error minting NFT:', err);\n      setError(err instanceof Error ? err.message : 'Failed to mint NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-button\",\n      children: /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"generator-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: prompt,\n          onChange: e => setPrompt(e.target.value),\n          placeholder: \"Enter your image prompt...\",\n          disabled: isGenerating,\n          className: \"prompt-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: size,\n            onChange: e => setSize(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"small\",\n              children: \"Small (512x512)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medium\",\n              children: \"Medium (768x768)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"large\",\n              children: \"Large (1024x1024)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"share-option\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: share,\n              onChange: e => setShare(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), \"Enable sharing\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isGenerating || !publicKey,\n        className: \"generate-button\",\n        children: isGenerating ? 'Generating...' : 'Generate NFT'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }, this), generatedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"generated-image\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: generatedImage,\n          alt: \"Generated NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [shareUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleShare,\n            className: \"share-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"share\",\n              children: \"\\uD83D\\uDD17\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this), \" Share\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDownload,\n            className: \"download-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"download\",\n              children: \"\\u2B07\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), \" Download\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleMint,\n            disabled: isMinting,\n            className: \"mint-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"mint\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), isMinting ? 'Minting...' : 'Mint as NFT']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTGenerator, \"q+vz+IIqkATmhCmQmGfFPwtyK6E=\", false, function () {\n  return [useWallet, useConnection];\n});\n_c = NFTGenerator;\nexport default NFTGenerator;\nvar _c;\n$RefreshReg$(_c, \"NFTGenerator\");","map":{"version":3,"names":["React","useState","useWallet","useConnection","WalletMultiButton","PublicKey","Keypair","getAssociatedTokenAddress","AiNftBrowserClient","jsxDEV","_jsxDEV","NFTGenerator","onGenerate","_s","publicKey","sendTransaction","connection","prompt","setPrompt","size","setSize","share","setShare","isGenerating","setIsGenerating","isMinting","setIsMinting","generatedImage","setGeneratedImage","shareUrl","setShareUrl","error","setError","client","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","walletAddress","toString","data","json","success","Error","imageUri","err","errorMessage","message","handleShare","shareData","title","text","url","navigator","test","userAgent","catch","console","clipboard","writeText","alert","handleDownload","link","document","createElement","href","download","Date","now","appendChild","click","removeChild","handleMint","mintKeypair","generate","mintPubkey","tokenAddress","metadataAddress","findProgramAddress","Buffer","from","toBuffer","process","env","REACT_APP_PROGRAM_ID","metadata","name","substring","symbol","description","image","attributes","trait_type","value","initTx","createInitializeTransaction","signature","signers","confirmTransaction","mintTx","createMintTransaction","mintSignature","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","placeholder","disabled","checked","src","alt","onClick","role","_c","$RefreshReg$"],"sources":["C:/Users/druti/OneDrive/Desktop/ai_nFt/ai_nFt/frontend/src/components/NFTGenerator.tsx"],"sourcesContent":["import React, { useState, ReactNode } from 'react';\r\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\r\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\r\nimport { PublicKey, Keypair } from '@solana/web3.js';\r\nimport { getAssociatedTokenAddress } from '@solana/spl-token';\r\nimport { AiNftBrowserClient } from '../utils/ai-nft-program';\r\nimport './NFTGenerator.css';\r\n\r\ninterface NFTGeneratorProps {\r\n  onGenerate?: (imageUrl: string) => void;\r\n}\r\n\r\nconst NFTGenerator: React.FC<NFTGeneratorProps> = ({ onGenerate }) => {\r\n  const { publicKey, sendTransaction } = useWallet();\r\n  const { connection } = useConnection();\r\n  const [prompt, setPrompt] = useState('');\r\n  const [size, setSize] = useState<'small' | 'medium' | 'large'>('medium');\r\n  const [share, setShare] = useState(false);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [generatedImage, setGeneratedImage] = useState<string | null>(null);\r\n  const [shareUrl, setShareUrl] = useState<string | null>(null);\r\n  const [error, setError] = useState<ReactNode | null>(null);\r\n  const [client] = useState(() => new AiNftBrowserClient(connection));\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!publicKey) {\r\n      setError('Please connect your wallet first');\r\n      return;\r\n    }\r\n    if (!prompt) {\r\n      setError('Please enter a prompt');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/generate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          prompt,\r\n          walletAddress: publicKey.toString(),\r\n          size,\r\n          share\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!data.success) {\r\n        throw new Error(data.error || 'Failed to generate NFT');\r\n      }\r\n\r\n      setGeneratedImage(data.imageUri);\r\n      setShareUrl(data.shareUrl);\r\n      if (onGenerate) {\r\n        onGenerate(data.imageUri);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to generate NFT';\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleShare = () => {\r\n    if (shareUrl) {\r\n      const shareData = {\r\n        title: 'Check out my AI-generated NFT!',\r\n        text: `Generated using AI NFT Creator: ${prompt}`,\r\n        url: shareUrl\r\n      };\r\n\r\n      if (navigator.share && /mobile|android|iphone/i.test(navigator.userAgent)) {\r\n        // Use native share on mobile devices\r\n        navigator.share(shareData).catch(console.error);\r\n      } else {\r\n        // Fallback to clipboard copy on desktop\r\n        navigator.clipboard.writeText(shareUrl);\r\n        alert('Share URL copied to clipboard! You can now paste it anywhere.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    if (generatedImage) {\r\n      const link = document.createElement('a');\r\n      link.href = generatedImage;\r\n      link.download = `AI-NFT-${Date.now()}.png`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n\r\n  const handleMint = async () => {\r\n    if (!generatedImage || !publicKey || !client) return;\r\n    \r\n    setIsMinting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Generate a new mint keypair\r\n      const mintKeypair = Keypair.generate();\r\n      const mintPubkey = mintKeypair.publicKey;\r\n      \r\n      // Get token account\r\n      const tokenAddress = await getAssociatedTokenAddress(\r\n        mintPubkey,\r\n        publicKey\r\n      );\r\n      \r\n      // Get metadata address\r\n      const [metadataAddress] = await PublicKey.findProgramAddress(\r\n        [Buffer.from('metadata'), mintPubkey.toBuffer()],\r\n        new PublicKey(process.env.REACT_APP_PROGRAM_ID || 'YOUR_PROGRAM_ID_HERE')\r\n      );\r\n      \r\n      // Create metadata\r\n      const metadata = {\r\n        name: `AI NFT: ${prompt.substring(0, 30)}...`,\r\n        symbol: 'AINFT',\r\n        description: prompt,\r\n        image: generatedImage,\r\n        attributes: [\r\n          {\r\n            trait_type: 'Generator',\r\n            value: 'Stability AI'\r\n          },\r\n          {\r\n            trait_type: 'Size',\r\n            value: size\r\n          },\r\n          {\r\n            trait_type: 'Creator',\r\n            value: publicKey.toString()\r\n          }\r\n        ]\r\n      };\r\n      \r\n      // Initialize NFT\r\n      const initTx = await client.createInitializeTransaction(\r\n        publicKey,\r\n        mintPubkey,\r\n        tokenAddress,\r\n        metadataAddress,\r\n        metadata.name,\r\n        metadata.symbol,\r\n        JSON.stringify(metadata)\r\n      );\r\n      \r\n      const signature = await sendTransaction(initTx, connection, {\r\n        signers: [mintKeypair]\r\n      });\r\n      \r\n      await connection.confirmTransaction(signature, 'confirmed');\r\n      \r\n      // Mint NFT\r\n      const mintTx = await client.createMintTransaction(\r\n        publicKey,\r\n        mintPubkey,\r\n        tokenAddress,\r\n        metadataAddress,\r\n        Date.now().toString(),\r\n        generatedImage,\r\n        JSON.stringify(metadata)\r\n      );\r\n      \r\n      const mintSignature = await sendTransaction(mintTx, connection);\r\n      await connection.confirmTransaction(mintSignature, 'confirmed');\r\n      \r\n      alert('NFT minted successfully! Transaction signature: ' + mintSignature);\r\n    } catch (err) {\r\n      console.error('Error minting NFT:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to mint NFT');\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"nft-generator\">\r\n      <div className=\"wallet-button\">\r\n        <WalletMultiButton />\r\n      </div>\r\n      \r\n      <form onSubmit={handleSubmit} className=\"generator-form\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            value={prompt}\r\n            onChange={(e) => setPrompt(e.target.value)}\r\n            placeholder=\"Enter your image prompt...\"\r\n            disabled={isGenerating}\r\n            className=\"prompt-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"options-group\">\r\n          <div className=\"size-selector\">\r\n            <label>Size:</label>\r\n            <select value={size} onChange={(e) => setSize(e.target.value as 'small' | 'medium' | 'large')}>\r\n              <option value=\"small\">Small (512x512)</option>\r\n              <option value=\"medium\">Medium (768x768)</option>\r\n              <option value=\"large\">Large (1024x1024)</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"share-option\">\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={share}\r\n                onChange={(e) => setShare(e.target.checked)}\r\n              />\r\n              Enable sharing\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" disabled={isGenerating || !publicKey} className=\"generate-button\">\r\n          {isGenerating ? 'Generating...' : 'Generate NFT'}\r\n        </button>\r\n        \r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        {generatedImage && (\r\n          <div className=\"generated-image\">\r\n            <img src={generatedImage} alt=\"Generated NFT\" />\r\n            <div className=\"action-buttons\">\r\n              {shareUrl && (\r\n                <button onClick={handleShare} className=\"share-button\">\r\n                  <span role=\"img\" aria-label=\"share\">🔗</span> Share\r\n                </button>\r\n              )}\r\n              <button onClick={handleDownload} className=\"download-button\">\r\n                <span role=\"img\" aria-label=\"download\">⬇️</span> Download\r\n              </button>\r\n              <button \r\n                onClick={handleMint} \r\n                disabled={isMinting} \r\n                className=\"mint-button\"\r\n              >\r\n                <span role=\"img\" aria-label=\"mint\">⚡</span>\r\n                {isMinting ? 'Minting...' : 'Mint as NFT'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NFTGenerator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
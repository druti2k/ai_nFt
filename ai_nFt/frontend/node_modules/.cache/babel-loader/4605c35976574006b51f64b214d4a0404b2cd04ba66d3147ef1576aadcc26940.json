{"ast":null,"code":"import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const buf = Buffer.from(amount, 'utf8');\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(buf.length, 'amount')]);\n  const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(data.length - 1, 'amount')]);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}\n//# sourceMappingURL=uiAmountToAmount.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
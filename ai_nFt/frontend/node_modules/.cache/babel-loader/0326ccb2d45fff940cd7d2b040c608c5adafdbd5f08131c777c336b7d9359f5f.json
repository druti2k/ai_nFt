{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tslib_1 = require(\"tslib\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst dynamic_1 = require(\"@trezor/connect/lib/impl/dynamic\");\nconst connectSettings_1 = require(\"./connectSettings\");\nconst core_in_iframe_1 = require(\"./impl/core-in-iframe\");\nconst core_in_popup_1 = require(\"./impl/core-in-popup\");\nconst core_in_suite_desktop_1 = require(\"./impl/core-in-suite-desktop\");\nconst IFRAME_ERRORS = ['Init_IframeBlocked', 'Init_IframeTimeout', 'Transport_Missing'];\nconst impl = new dynamic_1.TrezorConnectDynamic({\n  implementations: [{\n    type: 'iframe',\n    impl: new core_in_iframe_1.CoreInIframe()\n  }, {\n    type: 'core-in-popup',\n    impl: new core_in_popup_1.CoreInPopup()\n  }, {\n    type: 'core-in-suite-desktop',\n    impl: new core_in_suite_desktop_1.CoreInSuiteDesktop()\n  }],\n  getInitTarget: settings => {\n    if (settings.coreMode === 'iframe') {\n      return 'iframe';\n    } else if (settings.coreMode === 'popup') {\n      return 'core-in-popup';\n    } else if (settings.coreMode === 'suite-desktop') {\n      return 'core-in-suite-desktop';\n    } else {\n      if (settings.coreMode && settings.coreMode !== 'auto') {\n        console.warn(`Invalid coreMode: ${settings.coreMode}`);\n      }\n      return 'iframe';\n    }\n  },\n  handleErrorFallback: async errorCode => {\n    const env = (0, connectSettings_1.getEnv)();\n    const isCoreModeDisabled = impl.lastSettings?.popup === false || env === 'webextension';\n    const isCoreModeAuto = impl.lastSettings?.coreMode === 'auto' || impl.lastSettings?.coreMode === undefined;\n    if (!isCoreModeDisabled && isCoreModeAuto && IFRAME_ERRORS.includes(errorCode)) {\n      const webUsbUnavailableInBrowser = !navigator?.usb;\n      const webUsbDisabledInSettings = impl.lastSettings?.transports?.includes('WebUsbTransport') === false;\n      if (errorCode === 'Transport_Missing' && (webUsbUnavailableInBrowser || webUsbDisabledInSettings)) {\n        return false;\n      }\n      await impl.switchTarget('core-in-popup');\n      return true;\n    }\n    return false;\n  }\n});\nconst TrezorConnect = (0, factory_1.factory)({\n  eventEmitter: impl.eventEmitter,\n  init: impl.init.bind(impl),\n  call: impl.call.bind(impl),\n  setTransports: impl.setTransports.bind(impl),\n  manifest: impl.manifest.bind(impl),\n  requestLogin: impl.requestLogin.bind(impl),\n  uiResponse: impl.uiResponse.bind(impl),\n  cancel: impl.cancel.bind(impl),\n  dispose: impl.dispose.bind(impl)\n}, {\n  renderWebUSBButton: impl.getTarget().renderWebUSBButton.bind(impl),\n  disableWebUSB: impl.getTarget().disableWebUSB.bind(impl),\n  requestWebUSBDevice: impl.getTarget().requestWebUSBDevice.bind(impl)\n});\nexports.default = TrezorConnect;\ntslib_1.__exportStar(require(\"@trezor/connect/lib/exports\"), exports);","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","factory_1","dynamic_1","connectSettings_1","core_in_iframe_1","core_in_popup_1","core_in_suite_desktop_1","IFRAME_ERRORS","impl","TrezorConnectDynamic","implementations","type","CoreInIframe","CoreInPopup","CoreInSuiteDesktop","getInitTarget","settings","coreMode","console","warn","handleErrorFallback","errorCode","env","getEnv","isCoreModeDisabled","lastSettings","popup","isCoreModeAuto","undefined","includes","webUsbUnavailableInBrowser","navigator","usb","webUsbDisabledInSettings","transports","switchTarget","TrezorConnect","factory","eventEmitter","init","bind","call","setTransports","manifest","requestLogin","uiResponse","cancel","dispose","renderWebUSBButton","getTarget","disableWebUSB","requestWebUSBDevice","default","__exportStar"],"sources":["/home/druti/Desktop/ai_nFt/frontend/node_modules/@trezor/connect-web/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst dynamic_1 = require(\"@trezor/connect/lib/impl/dynamic\");\nconst connectSettings_1 = require(\"./connectSettings\");\nconst core_in_iframe_1 = require(\"./impl/core-in-iframe\");\nconst core_in_popup_1 = require(\"./impl/core-in-popup\");\nconst core_in_suite_desktop_1 = require(\"./impl/core-in-suite-desktop\");\nconst IFRAME_ERRORS = ['Init_IframeBlocked', 'Init_IframeTimeout', 'Transport_Missing'];\nconst impl = new dynamic_1.TrezorConnectDynamic({\n    implementations: [\n        {\n            type: 'iframe',\n            impl: new core_in_iframe_1.CoreInIframe(),\n        },\n        {\n            type: 'core-in-popup',\n            impl: new core_in_popup_1.CoreInPopup(),\n        },\n        {\n            type: 'core-in-suite-desktop',\n            impl: new core_in_suite_desktop_1.CoreInSuiteDesktop(),\n        },\n    ],\n    getInitTarget: (settings) => {\n        if (settings.coreMode === 'iframe') {\n            return 'iframe';\n        }\n        else if (settings.coreMode === 'popup') {\n            return 'core-in-popup';\n        }\n        else if (settings.coreMode === 'suite-desktop') {\n            return 'core-in-suite-desktop';\n        }\n        else {\n            if (settings.coreMode && settings.coreMode !== 'auto') {\n                console.warn(`Invalid coreMode: ${settings.coreMode}`);\n            }\n            return 'iframe';\n        }\n    },\n    handleErrorFallback: async (errorCode) => {\n        const env = (0, connectSettings_1.getEnv)();\n        const isCoreModeDisabled = impl.lastSettings?.popup === false || env === 'webextension';\n        const isCoreModeAuto = impl.lastSettings?.coreMode === 'auto' || impl.lastSettings?.coreMode === undefined;\n        if (!isCoreModeDisabled && isCoreModeAuto && IFRAME_ERRORS.includes(errorCode)) {\n            const webUsbUnavailableInBrowser = !navigator?.usb;\n            const webUsbDisabledInSettings = impl.lastSettings?.transports?.includes('WebUsbTransport') === false;\n            if (errorCode === 'Transport_Missing' &&\n                (webUsbUnavailableInBrowser || webUsbDisabledInSettings)) {\n                return false;\n            }\n            await impl.switchTarget('core-in-popup');\n            return true;\n        }\n        return false;\n    },\n});\nconst TrezorConnect = (0, factory_1.factory)({\n    eventEmitter: impl.eventEmitter,\n    init: impl.init.bind(impl),\n    call: impl.call.bind(impl),\n    setTransports: impl.setTransports.bind(impl),\n    manifest: impl.manifest.bind(impl),\n    requestLogin: impl.requestLogin.bind(impl),\n    uiResponse: impl.uiResponse.bind(impl),\n    cancel: impl.cancel.bind(impl),\n    dispose: impl.dispose.bind(impl),\n}, {\n    renderWebUSBButton: impl.getTarget().renderWebUSBButton.bind(impl),\n    disableWebUSB: impl.getTarget().disableWebUSB.bind(impl),\n    requestWebUSBDevice: impl.getTarget().requestWebUSBDevice.bind(impl),\n});\nexports.default = TrezorConnect;\ntslib_1.__exportStar(require(\"@trezor/connect/lib/exports\"), exports);\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
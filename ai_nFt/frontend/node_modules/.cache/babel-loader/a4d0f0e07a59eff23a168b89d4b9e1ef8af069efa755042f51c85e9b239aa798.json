{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDisableRequiredMemoTransfersInstruction = exports.createEnableRequiredMemoTransfersInstruction = exports.memoTransferInstructionData = exports.MemoTransferInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst errors_js_1 = require(\"../../errors.js\");\nconst internal_js_1 = require(\"../../instructions/internal.js\");\nconst types_js_1 = require(\"../../instructions/types.js\");\nvar MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (exports.MemoTransferInstruction = MemoTransferInstruction = {}));\n/** TODO: docs */\nexports.memoTransferInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('memoTransferInstruction')]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\n}\nexports.createEnableRequiredMemoTransfersInstruction = createEnableRequiredMemoTransfersInstruction;\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\n}\nexports.createDisableRequiredMemoTransfersInstruction = createDisableRequiredMemoTransfersInstruction;\nfunction createMemoTransferInstruction(memoTransferInstruction, account, authority, multiSigners, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(exports.memoTransferInstructionData.span);\n  exports.memoTransferInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n//# sourceMappingURL=instructions.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMint = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst initializeMint2_js_1 = require(\"../instructions/initializeMint2.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nfunction createMint(connection, payer, mintAuthority, freezeAuthority, decimals, keypair = web3_js_1.Keypair.generate(), confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const lamports = yield (0, mint_js_1.getMinimumBalanceForRentExemptMint)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: mint_js_1.MINT_SIZE,\n      lamports,\n      programId\n    }), (0, initializeMint2_js_1.createInitializeMint2Instruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\nexports.createMint = createMint;\n//# sourceMappingURL=createMint.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
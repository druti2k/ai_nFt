{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { createInitializeInstruction, createRemoveKeyInstruction, createUpdateAuthorityInstruction, createUpdateFieldInstruction, pack, unpack } from '@solana/spl-token-metadata';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { ExtensionType, getExtensionData, getNewAccountLenForExtensionLen } from '../extensionType.js';\nimport { updateTokenMetadata } from './state.js';\nimport { TokenAccountNotFoundError } from '../../errors.js';\nimport { unpackMint } from '../../state/index.js';\nasync function getAdditionalRentForNewMetadata(connection, address, tokenMetadata, programId = TOKEN_2022_PROGRAM_ID) {\n  const info = await connection.getAccountInfo(address);\n  if (!info) {\n    throw new TokenAccountNotFoundError();\n  }\n  const extensionLen = pack(tokenMetadata).length;\n  const newAccountLen = getNewAccountLenForExtensionLen(info, address, ExtensionType.TokenMetadata, extensionLen, programId);\n  if (newAccountLen <= info.data.length) {\n    return 0;\n  }\n  const newRentExemptMinimum = await connection.getMinimumBalanceForRentExemption(newAccountLen);\n  return newRentExemptMinimum - info.lamports;\n}\nasync function getAdditionalRentForUpdatedMetadata(connection, address, field, value, programId = TOKEN_2022_PROGRAM_ID) {\n  const info = await connection.getAccountInfo(address);\n  if (!info) {\n    throw new TokenAccountNotFoundError();\n  }\n  const mint = unpackMint(address, info, programId);\n  const extensionData = getExtensionData(ExtensionType.TokenMetadata, mint.tlvData);\n  if (extensionData === null) {\n    throw new Error('TokenMetadata extension not initialized');\n  }\n  const updatedTokenMetadata = updateTokenMetadata(unpack(extensionData), field, value);\n  const extensionLen = pack(updatedTokenMetadata).length;\n  const newAccountLen = getNewAccountLenForExtensionLen(info, address, ExtensionType.TokenMetadata, extensionLen, programId);\n  if (newAccountLen <= info.data.length) {\n    return 0;\n  }\n  const newRentExemptMinimum = await connection.getMinimumBalanceForRentExemption(newAccountLen);\n  return newRentExemptMinimum - info.lamports;\n}\n/**\n * Initializes a TLV entry with the basic token-metadata fields.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param mintAuthority    Mint Authority\n * @param name             Longer name of token\n * @param symbol           Shortened symbol of token\n * @param uri              URI pointing to more metadata (image, video, etc)\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataInitialize(connection, payer, mint, updateAuthority, mintAuthority, name, symbol, uri, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n  const transaction = new Transaction().add(createInitializeInstruction({\n    programId,\n    metadata: mint,\n    updateAuthority,\n    mint,\n    mintAuthority: mintAuthorityPublicKey,\n    name,\n    symbol,\n    uri\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Initializes a TLV entry with the basic token-metadata fields,\n * Includes a transfer for any additional rent-exempt SOL if required.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param mintAuthority    Mint Authority\n * @param name             Longer name of token\n * @param symbol           Shortened symbol of token\n * @param uri              URI pointing to more metadata (image, video, etc)\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataInitializeWithRentTransfer(connection, payer, mint, updateAuthority, mintAuthority, name, symbol, uri, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n  const transaction = new Transaction();\n  const lamports = await getAdditionalRentForNewMetadata(connection, mint, {\n    updateAuthority,\n    mint,\n    name,\n    symbol,\n    uri,\n    additionalMetadata: []\n  }, programId);\n  if (lamports > 0) {\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: mint,\n      lamports: lamports\n    }));\n  }\n  transaction.add(createInitializeInstruction({\n    programId,\n    metadata: mint,\n    updateAuthority,\n    mint,\n    mintAuthority: mintAuthorityPublicKey,\n    name,\n    symbol,\n    uri\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Updates a field in a token-metadata account.\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param field            Field to update in the metadata\n * @param value            Value to write for the field\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateField(connection, payer, mint, updateAuthority, field, value, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateFieldInstruction({\n    programId,\n    metadata: mint,\n    updateAuthority: updateAuthorityPublicKey,\n    field,\n    value\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Updates a field in a token-metadata account.\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n * Includes a transfer for any additional rent-exempt SOL if required.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param field            Field to update in the metadata\n * @param value            Value to write for the field\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateFieldWithRentTransfer(connection, payer, mint, updateAuthority, field, value, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n  const transaction = new Transaction();\n  const lamports = await getAdditionalRentForUpdatedMetadata(connection, mint, field, value, programId);\n  if (lamports > 0) {\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: mint,\n      lamports: lamports\n    }));\n  }\n  transaction.add(createUpdateFieldInstruction({\n    programId,\n    metadata: mint,\n    updateAuthority: updateAuthorityPublicKey,\n    field,\n    value\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Remove a field in a token-metadata account.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param key              Key to remove in the additional metadata portion\n * @param idempotent       When true, instruction will not error if the key does not exist\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataRemoveKey(connection, payer, mint, updateAuthority, key, idempotent, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n  const transaction = new Transaction().add(createRemoveKeyInstruction({\n    programId,\n    metadata: mint,\n    updateAuthority: updateAuthorityPublicKey,\n    key,\n    idempotent\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n *  Update authority\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param newAuthority     New authority for the token metadata, or unset\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateAuthority(connection, payer, mint, updateAuthority, newAuthority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateAuthorityInstruction({\n    programId,\n    metadata: mint,\n    oldAuthority: updateAuthorityPublicKey,\n    newAuthority\n  }));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
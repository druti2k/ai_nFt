{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID, nativeMint = NATIVE_MINT) {\n  // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n  if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n  // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n  if (!keypair) {\n    const associatedToken = getAssociatedTokenAddressSync(nativeMint, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, nativeMint, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: associatedToken,\n      lamports: amount\n    }), createSyncNativeInstruction(associatedToken, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  }\n  // Otherwise, create the account with the provided keypair and return its public key\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), SystemProgram.transfer({\n    fromPubkey: payer.publicKey,\n    toPubkey: keypair.publicKey,\n    lamports: amount\n  }), createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}\n//# sourceMappingURL=createWrappedNativeAccount.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
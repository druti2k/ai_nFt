{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\nexport const memoTransferInstructionData = struct([u8('instruction'), u8('memoTransferInstruction')]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createMemoTransferInstruction(memoTransferInstruction, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(memoTransferInstructionData.span);\n  memoTransferInstructionData.encode({\n    instruction: TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
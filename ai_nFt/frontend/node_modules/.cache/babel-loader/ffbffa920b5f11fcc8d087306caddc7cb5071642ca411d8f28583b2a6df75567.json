{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOrCreateAssociatedTokenAccount = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nconst account_js_1 = require(\"../state/account.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nfunction getOrCreateAssociatedTokenAccount(connection, payer, mint, owner, allowOwnerOffCurve = false, commitment, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account;\n    try {\n      account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n    } catch (error) {\n      // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n      // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n      // TokenInvalidAccountOwnerError in this code path.\n      if (error instanceof errors_js_1.TokenAccountNotFoundError || error instanceof errors_js_1.TokenInvalidAccountOwnerError) {\n        // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n        try {\n          const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n          yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n        } catch (error) {\n          // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n          // instruction error if the associated account exists already.\n        }\n        // Now this should always succeed\n        account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n      } else {\n        throw error;\n      }\n    }\n    if (!account.mint.equals(mint)) throw new errors_js_1.TokenInvalidMintError();\n    if (!account.owner.equals(owner)) throw new errors_js_1.TokenInvalidOwnerError();\n    return account;\n  });\n}\nexports.getOrCreateAssociatedTokenAccount = getOrCreateAssociatedTokenAccount;\n//# sourceMappingURL=getOrCreateAssociatedTokenAccount.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
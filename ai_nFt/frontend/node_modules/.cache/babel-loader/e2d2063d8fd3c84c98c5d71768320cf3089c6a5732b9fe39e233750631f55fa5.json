{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMultisigInstruction(account, signers, m, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer instanceof web3_js_1.PublicKey ? signer : signer.publicKey,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n  const data = Buffer.alloc(exports.initializeMultisigInstructionData.span);\n  exports.initializeMultisigInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createInitializeMultisigInstruction = createInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMultisigInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMultisigInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMultisig) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\nexports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMultisigInstructionUnchecked({\n  programId,\n  keys: [account, rent, ...signers],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: exports.initializeMultisigInstructionData.decode(data)\n  };\n}\nexports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;\n//# sourceMappingURL=initializeMultisig.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
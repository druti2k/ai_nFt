{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenTransferHookAccountDataNotFound = exports.TokenTransferHookInvalidSeed = exports.TokenTransferHookAccountNotFound = exports.TokenUnsupportedInstructionError = exports.TokenInvalidInstructionTypeError = exports.TokenInvalidInstructionDataError = exports.TokenInvalidInstructionKeysError = exports.TokenInvalidInstructionProgramError = exports.TokenOwnerOffCurveError = exports.TokenInvalidOwnerError = exports.TokenInvalidMintError = exports.TokenInvalidAccountSizeError = exports.TokenInvalidAccountOwnerError = exports.TokenInvalidAccountDataError = exports.TokenInvalidAccountError = exports.TokenAccountNotFoundError = exports.TokenError = void 0;\n/** Base class for errors */\nclass TokenError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nexports.TokenError = TokenError;\n/** Thrown if an account is not found at the expected address */\nclass TokenAccountNotFoundError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenAccountNotFoundError';\n  }\n}\nexports.TokenAccountNotFoundError = TokenAccountNotFoundError;\n/** Thrown if a program state account is not a valid Account */\nclass TokenInvalidAccountError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountError';\n  }\n}\nexports.TokenInvalidAccountError = TokenInvalidAccountError;\n/** Thrown if a program state account does not contain valid data */\nclass TokenInvalidAccountDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountDataError';\n  }\n}\nexports.TokenInvalidAccountDataError = TokenInvalidAccountDataError;\n/** Thrown if a program state account is not owned by the expected token program */\nclass TokenInvalidAccountOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountOwnerError';\n  }\n}\nexports.TokenInvalidAccountOwnerError = TokenInvalidAccountOwnerError;\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nclass TokenInvalidAccountSizeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountSizeError';\n  }\n}\nexports.TokenInvalidAccountSizeError = TokenInvalidAccountSizeError;\n/** Thrown if the mint of a token account doesn't match the expected mint */\nclass TokenInvalidMintError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidMintError';\n  }\n}\nexports.TokenInvalidMintError = TokenInvalidMintError;\n/** Thrown if the owner of a token account doesn't match the expected owner */\nclass TokenInvalidOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidOwnerError';\n  }\n}\nexports.TokenInvalidOwnerError = TokenInvalidOwnerError;\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nclass TokenOwnerOffCurveError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenOwnerOffCurveError';\n  }\n}\nexports.TokenOwnerOffCurveError = TokenOwnerOffCurveError;\n/** Thrown if an instruction's program is invalid */\nclass TokenInvalidInstructionProgramError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionProgramError';\n  }\n}\nexports.TokenInvalidInstructionProgramError = TokenInvalidInstructionProgramError;\n/** Thrown if an instruction's keys are invalid */\nclass TokenInvalidInstructionKeysError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionKeysError';\n  }\n}\nexports.TokenInvalidInstructionKeysError = TokenInvalidInstructionKeysError;\n/** Thrown if an instruction's data is invalid */\nclass TokenInvalidInstructionDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionDataError';\n  }\n}\nexports.TokenInvalidInstructionDataError = TokenInvalidInstructionDataError;\n/** Thrown if an instruction's type is invalid */\nclass TokenInvalidInstructionTypeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionTypeError';\n  }\n}\nexports.TokenInvalidInstructionTypeError = TokenInvalidInstructionTypeError;\n/** Thrown if the program does not support the desired instruction */\nclass TokenUnsupportedInstructionError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenUnsupportedInstructionError';\n  }\n}\nexports.TokenUnsupportedInstructionError = TokenUnsupportedInstructionError;\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nclass TokenTransferHookAccountNotFound extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookAccountNotFound';\n  }\n}\nexports.TokenTransferHookAccountNotFound = TokenTransferHookAccountNotFound;\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nclass TokenTransferHookInvalidSeed extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookInvalidSeed';\n  }\n}\nexports.TokenTransferHookInvalidSeed = TokenTransferHookInvalidSeed;\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nclass TokenTransferHookAccountDataNotFound extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenTransferHookAccountDataNotFound';\n  }\n}\nexports.TokenTransferHookAccountDataNotFound = TokenTransferHookAccountDataNotFound;\n//# sourceMappingURL=errors.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
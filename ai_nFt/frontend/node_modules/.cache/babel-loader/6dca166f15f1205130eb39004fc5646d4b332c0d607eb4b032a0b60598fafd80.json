{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeApproveInstructionUnchecked = exports.decodeApproveInstruction = exports.createApproveInstruction = exports.approveInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.approveInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.approveInstructionData.span);\n  exports.approveInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createApproveInstruction = createApproveInstruction;\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeApproveInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.approveInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.Approve) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\nexports.decodeApproveInstruction = decodeApproveInstruction;\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeApproveInstructionUnchecked({\n  programId,\n  keys: [account, delegate, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: exports.approveInstructionData.decode(data)\n  };\n}\nexports.decodeApproveInstructionUnchecked = decodeApproveInstructionUnchecked;\n//# sourceMappingURL=approve.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenMetadata = exports.updateTokenMetadata = void 0;\nconst spl_token_metadata_1 = require(\"@solana/spl-token-metadata\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst extensionType_js_1 = require(\"../extensionType.js\");\nconst mint_js_1 = require(\"../../state/mint.js\");\nconst getNormalizedTokenMetadataField = field => {\n  if (field === spl_token_metadata_1.Field.Name || field === 'Name' || field === 'name') {\n    return 'name';\n  }\n  if (field === spl_token_metadata_1.Field.Symbol || field === 'Symbol' || field === 'symbol') {\n    return 'symbol';\n  }\n  if (field === spl_token_metadata_1.Field.Uri || field === 'Uri' || field === 'uri') {\n    return 'uri';\n  }\n  return field;\n};\nfunction updateTokenMetadata(current, key, value) {\n  const field = getNormalizedTokenMetadataField(key);\n  if (field === 'mint' || field === 'updateAuthority') {\n    throw new Error(`Cannot update ${field} via this instruction`);\n  }\n  // Handle updates to default keys\n  if (['name', 'symbol', 'uri'].includes(field)) {\n    return Object.assign(Object.assign({}, current), {\n      [field]: value\n    });\n  }\n  // Avoid mutating input, make a shallow copy\n  const additionalMetadata = [...current.additionalMetadata];\n  const i = current.additionalMetadata.findIndex(x => x[0] === field);\n  if (i === -1) {\n    // Key was not found, add it\n    additionalMetadata.push([field, value]);\n  } else {\n    // Key was found, change value\n    additionalMetadata[i] = [field, value];\n  }\n  return Object.assign(Object.assign({}, current), {\n    additionalMetadata\n  });\n}\nexports.updateTokenMetadata = updateTokenMetadata;\n/**\n * Retrieve Token Metadata Information\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token Metadata information\n */\nfunction getTokenMetadata(connection, address, commitment, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const mintInfo = yield (0, mint_js_1.getMint)(connection, address, commitment, programId);\n    const data = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TokenMetadata, mintInfo.tlvData);\n    if (data === null) {\n      return null;\n    }\n    return (0, spl_token_metadata_1.unpack)(data);\n  });\n}\nexports.getTokenMetadata = getTokenMetadata;\n//# sourceMappingURL=state.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
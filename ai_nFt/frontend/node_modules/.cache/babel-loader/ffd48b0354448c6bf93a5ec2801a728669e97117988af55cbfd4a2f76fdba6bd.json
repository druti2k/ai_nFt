{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferInstructionData.span);\n  transferInstructionData.encode({\n    instruction: TokenInstruction.Transfer,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n  if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({\n  programId,\n  keys: [source, destination, owner, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferInstructionData.decode(data)\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { transformEncoder, assertIsFixedSize, fixEncoderSize, transformDecoder, fixDecoderSize, containsBytes, combineCodec } from '@solana/codecs-core';\nimport { getUnitEncoder, getBooleanEncoder, getConstantEncoder, getUnionEncoder, getTupleEncoder, getUnitDecoder, getBooleanDecoder, getConstantDecoder, getUnionDecoder, getTupleDecoder } from '@solana/codecs-data-structures';\nimport { getU8Encoder, getU8Decoder } from '@solana/codecs-numbers';\n\n// src/option.ts\nvar some = value => ({\n  __option: \"Some\",\n  value\n});\nvar none = () => ({\n  __option: \"None\"\n});\nvar isOption = input => !!(input && typeof input === \"object\" && \"__option\" in input && (input.__option === \"Some\" && \"value\" in input || input.__option === \"None\"));\nvar isSome = option => option.__option === \"Some\";\nvar isNone = option => option.__option === \"None\";\n\n// src/unwrap-option.ts\nfunction unwrapOption(option, fallback) {\n  if (isSome(option)) return option.value;\n  return fallback ? fallback() : null;\n}\nvar wrapNullable = nullable => nullable !== null ? some(nullable) : none();\n\n// src/option-codec.ts\nfunction getOptionEncoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return transformEncoder(getUnitEncoder(), _boolean => void 0);\n    }\n    return getBooleanEncoder({\n      size: config.prefix ?? getU8Encoder()\n    });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      assertIsFixedSize(item);\n      return fixEncoderSize(getUnitEncoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitEncoder();\n    }\n    return getConstantEncoder(config.noneValue);\n  })();\n  return getUnionEncoder([transformEncoder(getTupleEncoder([prefix, noneValue]), _value => [false, void 0]), transformEncoder(getTupleEncoder([prefix, item]), value => [true, isOption(value) && isSome(value) ? value.value : value])], variant => {\n    const option = isOption(variant) ? variant : wrapNullable(variant);\n    return Number(isSome(option));\n  });\n}\nfunction getOptionDecoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return transformDecoder(getUnitDecoder(), () => false);\n    }\n    return getBooleanDecoder({\n      size: config.prefix ?? getU8Decoder()\n    });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      assertIsFixedSize(item);\n      return fixDecoderSize(getUnitDecoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitDecoder();\n    }\n    return getConstantDecoder(config.noneValue);\n  })();\n  return getUnionDecoder([transformDecoder(getTupleDecoder([prefix, noneValue]), () => none()), transformDecoder(getTupleDecoder([prefix, item]), ([, value]) => some(value))], (bytes, offset) => {\n    if (config.prefix === null && !config.noneValue) {\n      return Number(offset < bytes.length);\n    }\n    if (config.prefix === null && config.noneValue != null) {\n      const zeroValue = config.noneValue === \"zeroes\" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;\n      return containsBytes(bytes, zeroValue, offset) ? 0 : 1;\n    }\n    return Number(prefix.read(bytes, offset)[0]);\n  });\n}\nfunction getOptionCodec(item, config = {}) {\n  return combineCodec(getOptionEncoder(item, config), getOptionDecoder(item, config));\n}\n\n// src/unwrap-option-recursively.ts\nfunction unwrapOptionRecursively(input, fallback) {\n  if (!input || ArrayBuffer.isView(input)) {\n    return input;\n  }\n  const next = x => fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x);\n  if (isOption(input)) {\n    if (isSome(input)) return next(input.value);\n    return fallback ? fallback() : null;\n  }\n  if (Array.isArray(input)) {\n    return input.map(next);\n  }\n  if (typeof input === \"object\") {\n    return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));\n  }\n  return input;\n}\nexport { getOptionCodec, getOptionDecoder, getOptionEncoder, isNone, isOption, isSome, none, some, unwrapOption, unwrapOptionRecursively, wrapNullable };\n//# sourceMappingURL=index.browser.mjs.map\n//# sourceMappingURL=index.browser.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
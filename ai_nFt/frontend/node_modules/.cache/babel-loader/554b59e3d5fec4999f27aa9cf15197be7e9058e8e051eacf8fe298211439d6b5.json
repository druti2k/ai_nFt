{"ast":null,"code":"var _InitializeInstruction, _MintInstruction, _TransferInstruction;\nimport { PublicKey, Transaction, TransactionInstruction, SystemProgram } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction } from '@solana/spl-token';\nimport * as borsh from 'borsh';\n\n// The address of your deployed program\nconst PROGRAM_ID = new PublicKey('YOUR_PROGRAM_ID_HERE');\n\n// Define instruction data layout using borsh\nclass InitializeInstruction {\n  constructor(props) {\n    this.instruction = 0;\n    // 0 = Initialize\n    this.name = void 0;\n    this.symbol = void 0;\n    this.uri = void 0;\n    this.name = props.name;\n    this.symbol = props.symbol;\n    this.uri = props.uri;\n  }\n}\n_InitializeInstruction = InitializeInstruction;\nInitializeInstruction.schema = new Map([[_InitializeInstruction, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['name', 'string'], ['symbol', 'string'], ['uri', 'string']]\n}]]);\nclass MintInstruction {\n  constructor(props) {\n    this.instruction = 1;\n    // 1 = Mint\n    this.tokenId = void 0;\n    this.imageUrl = void 0;\n    this.metadata = void 0;\n    this.tokenId = props.tokenId;\n    this.imageUrl = props.imageUrl;\n    this.metadata = props.metadata;\n  }\n}\n_MintInstruction = MintInstruction;\nMintInstruction.schema = new Map([[_MintInstruction, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['tokenId', 'string'], ['imageUrl', 'string'], ['metadata', 'string']]\n}]]);\nclass TransferInstruction {\n  constructor(props) {\n    this.instruction = 2;\n    // 2 = Transfer\n    this.amount = void 0;\n    this.amount = props.amount;\n  }\n}\n_TransferInstruction = TransferInstruction;\nTransferInstruction.schema = new Map([[_TransferInstruction, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['amount', 'u64']]\n}]]);\nexport class AiNftBrowserClient {\n  constructor(connection) {\n    this.connection = void 0;\n    this.connection = connection;\n  }\n  async createInitializeTransaction(payer, mintPubkey, tokenAddress, metadataAddress, name, symbol, uri) {\n    // Create instruction data\n    const instructionData = new InitializeInstruction({\n      name,\n      symbol,\n      uri\n    });\n    const serializedData = borsh.serialize(InitializeInstruction.schema, instructionData);\n\n    // Create transaction\n    const transaction = new Transaction().add(\n    // Create the associated token account if it doesn't exist\n    createAssociatedTokenAccountInstruction(payer, tokenAddress, payer, mintPubkey),\n    // Initialize the NFT with our program\n    new TransactionInstruction({\n      keys: [{\n        pubkey: payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: mintPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: tokenAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: metadataAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: PROGRAM_ID,\n      data: Buffer.from(serializedData)\n    }));\n    return transaction;\n  }\n  async createMintTransaction(payer, mintPubkey, tokenAddress, metadataAddress, tokenId, imageUrl, metadata) {\n    // Create instruction data\n    const instructionData = new MintInstruction({\n      tokenId,\n      imageUrl,\n      metadata\n    });\n    const serializedData = borsh.serialize(MintInstruction.schema, instructionData);\n\n    // Create transaction\n    const transaction = new Transaction().add(new TransactionInstruction({\n      keys: [{\n        pubkey: payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: mintPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: tokenAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: metadataAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: PROGRAM_ID,\n      data: Buffer.from(serializedData)\n    }));\n    return transaction;\n  }\n}","map":{"version":3,"names":["PublicKey","Transaction","TransactionInstruction","SystemProgram","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","borsh","PROGRAM_ID","InitializeInstruction","constructor","props","instruction","name","symbol","uri","_InitializeInstruction","schema","Map","kind","fields","MintInstruction","tokenId","imageUrl","metadata","_MintInstruction","TransferInstruction","amount","_TransferInstruction","AiNftBrowserClient","connection","createInitializeTransaction","payer","mintPubkey","tokenAddress","metadataAddress","instructionData","serializedData","serialize","transaction","add","keys","pubkey","isSigner","isWritable","programId","data","Buffer","from","createMintTransaction"],"sources":["C:/Users/druti/OneDrive/Desktop/ai_nFt/ai_nFt/frontend/src/utils/ai-nft-program.ts"],"sourcesContent":["import { \n  Connection, \n  PublicKey, \n  Transaction,\n  TransactionInstruction,\n  SystemProgram,\n} from '@solana/web3.js';\nimport {\n  TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n} from '@solana/spl-token';\nimport * as borsh from 'borsh';\n\n// The address of your deployed program\nconst PROGRAM_ID = new PublicKey('YOUR_PROGRAM_ID_HERE');\n\n// Define instruction data layout using borsh\nclass InitializeInstruction {\n  instruction = 0; // 0 = Initialize\n  name: string;\n  symbol: string;\n  uri: string;\n\n  constructor(props: { name: string; symbol: string; uri: string }) {\n    this.name = props.name;\n    this.symbol = props.symbol;\n    this.uri = props.uri;\n  }\n\n  static schema: Map<any, any> = new Map([\n    [\n      InitializeInstruction,\n      {\n        kind: 'struct',\n        fields: [\n          ['instruction', 'u8'],\n          ['name', 'string'],\n          ['symbol', 'string'],\n          ['uri', 'string'],\n        ],\n      },\n    ],\n  ]);\n}\n\nclass MintInstruction {\n  instruction = 1; // 1 = Mint\n  tokenId: string;\n  imageUrl: string;\n  metadata: string;\n\n  constructor(props: { tokenId: string; imageUrl: string; metadata: string }) {\n    this.tokenId = props.tokenId;\n    this.imageUrl = props.imageUrl;\n    this.metadata = props.metadata;\n  }\n\n  static schema: Map<any, any> = new Map([\n    [\n      MintInstruction,\n      {\n        kind: 'struct',\n        fields: [\n          ['instruction', 'u8'],\n          ['tokenId', 'string'],\n          ['imageUrl', 'string'],\n          ['metadata', 'string'],\n        ],\n      },\n    ],\n  ]);\n}\n\nclass TransferInstruction {\n  instruction = 2; // 2 = Transfer\n  amount: number;\n\n  constructor(props: { amount: number }) {\n    this.amount = props.amount;\n  }\n\n  static schema: Map<any, any> = new Map([\n    [\n      TransferInstruction,\n      {\n        kind: 'struct',\n        fields: [\n          ['instruction', 'u8'],\n          ['amount', 'u64'],\n        ],\n      },\n    ],\n  ]);\n}\n\nexport class AiNftBrowserClient {\n  connection: Connection;\n\n  constructor(connection: Connection) {\n    this.connection = connection;\n  }\n\n  async createInitializeTransaction(\n    payer: PublicKey,\n    mintPubkey: PublicKey,\n    tokenAddress: PublicKey,\n    metadataAddress: PublicKey,\n    name: string,\n    symbol: string,\n    uri: string\n  ): Promise<Transaction> {\n    // Create instruction data\n    const instructionData = new InitializeInstruction({\n      name,\n      symbol,\n      uri,\n    });\n    \n    const serializedData = borsh.serialize(\n      InitializeInstruction.schema,\n      instructionData\n    );\n\n    // Create transaction\n    const transaction = new Transaction().add(\n      // Create the associated token account if it doesn't exist\n      createAssociatedTokenAccountInstruction(\n        payer,\n        tokenAddress,\n        payer,\n        mintPubkey\n      ),\n      // Initialize the NFT with our program\n      new TransactionInstruction({\n        keys: [\n          { pubkey: payer, isSigner: true, isWritable: true },\n          { pubkey: mintPubkey, isSigner: false, isWritable: true },\n          { pubkey: tokenAddress, isSigner: false, isWritable: true },\n          { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          { pubkey: metadataAddress, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'), isSigner: false, isWritable: false },\n        ],\n        programId: PROGRAM_ID,\n        data: Buffer.from(serializedData),\n      })\n    );\n\n    return transaction;\n  }\n\n  async createMintTransaction(\n    payer: PublicKey,\n    mintPubkey: PublicKey,\n    tokenAddress: PublicKey,\n    metadataAddress: PublicKey,\n    tokenId: string,\n    imageUrl: string,\n    metadata: string\n  ): Promise<Transaction> {\n    // Create instruction data\n    const instructionData = new MintInstruction({\n      tokenId,\n      imageUrl,\n      metadata,\n    });\n    \n    const serializedData = borsh.serialize(\n      MintInstruction.schema,\n      instructionData\n    );\n\n    // Create transaction\n    const transaction = new Transaction().add(\n      new TransactionInstruction({\n        keys: [\n          { pubkey: payer, isSigner: true, isWritable: true },\n          { pubkey: mintPubkey, isSigner: false, isWritable: true },\n          { pubkey: tokenAddress, isSigner: false, isWritable: true },\n          { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          { pubkey: metadataAddress, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'), isSigner: false, isWritable: false },\n        ],\n        programId: PROGRAM_ID,\n        data: Buffer.from(serializedData),\n      })\n    );\n\n    return transaction;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
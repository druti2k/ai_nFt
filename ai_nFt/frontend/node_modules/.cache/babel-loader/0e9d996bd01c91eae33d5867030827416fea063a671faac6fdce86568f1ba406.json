{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdateDefaultAccountStateInstruction = exports.createInitializeDefaultAccountStateInstruction = exports.defaultAccountStateInstructionData = exports.DefaultAccountStateInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst errors_js_1 = require(\"../../errors.js\");\nconst internal_js_1 = require(\"../../instructions/internal.js\");\nconst types_js_1 = require(\"../../instructions/types.js\");\nvar DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction || (exports.DefaultAccountStateInstruction = DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexports.defaultAccountStateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('defaultAccountStateInstruction'), (0, buffer_layout_1.u8)('accountState')]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeDefaultAccountStateInstruction(mint, accountState, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n    accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createInitializeDefaultAccountStateInstruction = createInitializeDefaultAccountStateInstruction;\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], freezeAuthority, multiSigners);\n  const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n    accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createUpdateDefaultAccountStateInstruction = createUpdateDefaultAccountStateInstruction;\n//# sourceMappingURL=instructions.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
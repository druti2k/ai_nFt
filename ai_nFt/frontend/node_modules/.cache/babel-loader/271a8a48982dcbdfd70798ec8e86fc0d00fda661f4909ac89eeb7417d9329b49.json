{"ast":null,"code":"import { ACCOUNT_SIZE } from '../state/account.js';\nimport { MINT_SIZE, unpackMint } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { CPI_GUARD_SIZE } from './cpiGuard/index.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { METADATA_POINTER_SIZE } from './metadataPointer/state.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE, NON_TRANSFERABLE_ACCOUNT_SIZE } from './nonTransferable.js';\nimport { PERMANENT_DELEGATE_SIZE } from './permanentDelegate.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nimport { TRANSFER_HOOK_ACCOUNT_SIZE, TRANSFER_HOOK_SIZE } from './transferHook/index.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../constants.js';\n// Sequence from https://github.com/solana-labs/solana-program-library/blob/master/token/program-2022/src/extension/mod.rs#L903\nexport var ExtensionType;\n(function (ExtensionType) {\n  ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n  ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n  ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n  ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n  ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n  ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n  ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n  ExtensionType[ExtensionType[\"InterestBearingConfig\"] = 10] = \"InterestBearingConfig\";\n  ExtensionType[ExtensionType[\"CpiGuard\"] = 11] = \"CpiGuard\";\n  ExtensionType[ExtensionType[\"PermanentDelegate\"] = 12] = \"PermanentDelegate\";\n  ExtensionType[ExtensionType[\"NonTransferableAccount\"] = 13] = \"NonTransferableAccount\";\n  ExtensionType[ExtensionType[\"TransferHook\"] = 14] = \"TransferHook\";\n  ExtensionType[ExtensionType[\"TransferHookAccount\"] = 15] = \"TransferHookAccount\";\n  // ConfidentialTransferFee, // Not implemented yet\n  // ConfidentialTransferFeeAmount, // Not implemented yet\n  ExtensionType[ExtensionType[\"MetadataPointer\"] = 18] = \"MetadataPointer\";\n  ExtensionType[ExtensionType[\"TokenMetadata\"] = 19] = \"TokenMetadata\";\n})(ExtensionType || (ExtensionType = {}));\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\nfunction addTypeAndLengthToLen(len) {\n  return len + TYPE_SIZE + LENGTH_SIZE;\n}\nfunction isVariableLengthExtension(e) {\n  switch (e) {\n    case ExtensionType.TokenMetadata:\n      return true;\n    default:\n      return false;\n  }\n}\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e) {\n  switch (e) {\n    case ExtensionType.Uninitialized:\n      return 0;\n    case ExtensionType.TransferFeeConfig:\n      return TRANSFER_FEE_CONFIG_SIZE;\n    case ExtensionType.TransferFeeAmount:\n      return TRANSFER_FEE_AMOUNT_SIZE;\n    case ExtensionType.MintCloseAuthority:\n      return MINT_CLOSE_AUTHORITY_SIZE;\n    case ExtensionType.ConfidentialTransferMint:\n      return 97;\n    case ExtensionType.ConfidentialTransferAccount:\n      return 286;\n    case ExtensionType.CpiGuard:\n      return CPI_GUARD_SIZE;\n    case ExtensionType.DefaultAccountState:\n      return DEFAULT_ACCOUNT_STATE_SIZE;\n    case ExtensionType.ImmutableOwner:\n      return IMMUTABLE_OWNER_SIZE;\n    case ExtensionType.MemoTransfer:\n      return MEMO_TRANSFER_SIZE;\n    case ExtensionType.MetadataPointer:\n      return METADATA_POINTER_SIZE;\n    case ExtensionType.NonTransferable:\n      return NON_TRANSFERABLE_SIZE;\n    case ExtensionType.InterestBearingConfig:\n      return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n    case ExtensionType.PermanentDelegate:\n      return PERMANENT_DELEGATE_SIZE;\n    case ExtensionType.NonTransferableAccount:\n      return NON_TRANSFERABLE_ACCOUNT_SIZE;\n    case ExtensionType.TransferHook:\n      return TRANSFER_HOOK_SIZE;\n    case ExtensionType.TransferHookAccount:\n      return TRANSFER_HOOK_ACCOUNT_SIZE;\n    case ExtensionType.TokenMetadata:\n      throw Error(`Cannot get type length for variable extension type: ${e}`);\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function isMintExtension(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.ConfidentialTransferMint:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.TransferHook:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n      return true;\n    case ExtensionType.Uninitialized:\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n      return false;\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function isAccountExtension(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n      return true;\n    case ExtensionType.Uninitialized:\n    case ExtensionType.TransferFeeConfig:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.ConfidentialTransferMint:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.TransferHook:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n      return false;\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function getAccountTypeOfMintType(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n      return ExtensionType.TransferFeeAmount;\n    case ExtensionType.ConfidentialTransferMint:\n      return ExtensionType.ConfidentialTransferAccount;\n    case ExtensionType.NonTransferable:\n      return ExtensionType.NonTransferableAccount;\n    case ExtensionType.TransferHook:\n      return ExtensionType.TransferHookAccount;\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.CpiGuard:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.MetadataPointer:\n    case ExtensionType.TokenMetadata:\n    case ExtensionType.Uninitialized:\n    case ExtensionType.InterestBearingConfig:\n    case ExtensionType.PermanentDelegate:\n    case ExtensionType.NonTransferableAccount:\n    case ExtensionType.TransferHookAccount:\n      return ExtensionType.Uninitialized;\n  }\n}\nfunction getLen(extensionTypes, baseSize, variableLengthExtensions = {}) {\n  if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {\n    return baseSize;\n  } else {\n    const accountLength = ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE + extensionTypes.filter((element, i) => i === extensionTypes.indexOf(element)).map(element => addTypeAndLengthToLen(getTypeLen(element))).reduce((a, b) => a + b, 0) + Object.entries(variableLengthExtensions).map(([extension, len]) => {\n      if (!isVariableLengthExtension(Number(extension))) {\n        throw Error(`Extension ${extension} is not variable length`);\n      }\n      return addTypeAndLengthToLen(len);\n    }).reduce((a, b) => a + b, 0);\n    if (accountLength === MULTISIG_SIZE) {\n      return accountLength + TYPE_SIZE;\n    } else {\n      return accountLength;\n    }\n  }\n}\nexport function getMintLen(extensionTypes, variableLengthExtensions = {}) {\n  return getLen(extensionTypes, MINT_SIZE, variableLengthExtensions);\n}\nexport function getAccountLen(extensionTypes) {\n  // There are currently no variable length extensions for accounts\n  return getLen(extensionTypes, ACCOUNT_SIZE);\n}\nexport function getExtensionData(extension, tlvData) {\n  let extensionTypeIndex = 0;\n  while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);\n    if (entryType == extension) {\n      return tlvData.slice(typeIndex, typeIndex + entryLength);\n    }\n    extensionTypeIndex = typeIndex + entryLength;\n  }\n  return null;\n}\nexport function getExtensionTypes(tlvData) {\n  const extensionTypes = [];\n  let extensionTypeIndex = 0;\n  while (extensionTypeIndex < tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    extensionTypes.push(entryType);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    extensionTypeIndex += addTypeAndLengthToLen(entryLength);\n  }\n  return extensionTypes;\n}\nexport function getAccountLenForMint(mint) {\n  const extensionTypes = getExtensionTypes(mint.tlvData);\n  const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n  return getAccountLen(accountExtensions);\n}\nexport function getNewAccountLenForExtensionLen(info, address, extensionType, extensionLen, programId = TOKEN_2022_PROGRAM_ID) {\n  const mint = unpackMint(address, info, programId);\n  const extensionData = getExtensionData(extensionType, mint.tlvData);\n  const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;\n  const newExtensionLen = addTypeAndLengthToLen(extensionLen);\n  return info.data.length + newExtensionLen - currentExtensionLen;\n}\n//# sourceMappingURL=extensionType.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
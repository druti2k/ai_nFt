{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializePermanentDelegateInstructionUnchecked = exports.decodeInitializePermanentDelegateInstruction = exports.createInitializePermanentDelegateInstruction = exports.initializePermanentDelegateInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst web3_js_2 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializePermanentDelegateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.publicKey)('delegate')]);\n/**\n * Construct an InitializePermanentDelegate instruction\n *\n * @param mint               Token mint account\n * @param permanentDelegate  Authority that may sign for `Transfer`s and `Burn`s on any account\n * @param programId          SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializePermanentDelegateInstruction(mint, permanentDelegate, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.initializePermanentDelegateInstructionData.span);\n  exports.initializePermanentDelegateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializePermanentDelegate,\n    delegate: permanentDelegate || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_2.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createInitializePermanentDelegateInstruction = createInitializePermanentDelegateInstruction;\n/**\n * Decode an InitializePermanentDelegate instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializePermanentDelegateInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializePermanentDelegateInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializePermanentDelegate) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\nexports.decodeInitializePermanentDelegateInstruction = decodeInitializePermanentDelegateInstruction;\n/**\n * Decode an InitializePermanentDelegate instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializePermanentDelegateInstructionUnchecked({\n  programId,\n  keys: [mint],\n  data\n}) {\n  const {\n    instruction,\n    delegate\n  } = exports.initializePermanentDelegateInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      delegate\n    }\n  };\n}\nexports.decodeInitializePermanentDelegateInstructionUnchecked = decodeInitializePermanentDelegateInstructionUnchecked;\n//# sourceMappingURL=initializePermanentDelegate.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var MetadataPointerInstruction;\n(function (MetadataPointerInstruction) {\n  MetadataPointerInstruction[MetadataPointerInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  MetadataPointerInstruction[MetadataPointerInstruction[\"Update\"] = 1] = \"Update\";\n})(MetadataPointerInstruction || (MetadataPointerInstruction = {}));\nexport const initializeMetadataPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('metadataPointerInstruction'), publicKey('authority'), publicKey('metadataAddress')]);\n/**\n * Construct an Initialize MetadataPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the metadata address\n * @param metadataAddress Optional Account address that holds the metadata\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMetadataPointerInstruction(mint, authority, metadataAddress, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeMetadataPointerData.span);\n  initializeMetadataPointerData.encode({\n    instruction: TokenInstruction.MetadataPointerExtension,\n    metadataPointerInstruction: MetadataPointerInstruction.Initialize,\n    authority: authority ?? PublicKey.default,\n    metadataAddress: metadataAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}\nexport const updateMetadataPointerData = struct([\n// prettier-ignore\nu8('instruction'), u8('metadataPointerInstruction'), publicKey('metadataAddress')]);\nexport function createUpdateMetadataPointerInstruction(mint, authority, metadataAddress, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(updateMetadataPointerData.span);\n  updateMetadataPointerData.encode({\n    instruction: TokenInstruction.MetadataPointerExtension,\n    metadataPointerInstruction: MetadataPointerInstruction.Update,\n    metadataAddress: metadataAddress ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
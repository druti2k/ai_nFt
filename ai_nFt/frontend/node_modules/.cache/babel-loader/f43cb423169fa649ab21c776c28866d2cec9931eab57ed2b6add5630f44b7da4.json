{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeAccount2InstructionUnchecked = exports.decodeInitializeAccount2Instruction = exports.createInitializeAccount2Instruction = exports.initializeAccount2InstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\nexports.initializeAccount2InstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.publicKey)('owner')]);\n/**\n * Construct an InitializeAccount2 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeAccount2Instruction(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeAccount2InstructionData.span);\n  exports.initializeAccount2InstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeAccount2,\n    owner\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexports.createInitializeAccount2Instruction = createInitializeAccount2Instruction;\n/**\n * Decode an InitializeAccount2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeAccount2Instruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeAccount2InstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeAccount2InstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount2) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !rent) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      rent\n    },\n    data\n  };\n}\nexports.decodeInitializeAccount2Instruction = decodeInitializeAccount2Instruction;\n/**\n * Decode an InitializeAccount2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeAccount2InstructionUnchecked({\n  programId,\n  keys: [account, mint, rent],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      rent\n    },\n    data: exports.initializeAccount2InstructionData.decode(data)\n  };\n}\nexports.decodeInitializeAccount2InstructionUnchecked = decodeInitializeAccount2InstructionUnchecked;\n//# sourceMappingURL=initializeAccount2.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeTransferHookInstruction, createTransferCheckedWithFeeAndTransferHookInstruction, createTransferCheckedWithTransferHookInstruction, createUpdateTransferHookInstruction } from './instructions.js';\n/**\n * Initialize a transfer hook on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to initialize with extension\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId The transfer hook program account\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeTransferHook(connection, payer, mint, authority, transferHookProgramId, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const transaction = new Transaction().add(createInitializeTransferHookInstruction(mint, authority, transferHookProgramId, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update the transfer hook program on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to modify\n * @param transferHookProgramId New transfer hook program account\n * @param authority             Transfer hook update authority\n * @param multiSigners          Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateTransferHook(connection, payer, mint, transferHookProgramId, authority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createUpdateTransferHookInstruction(mint, authorityPublicKey, transferHookProgramId, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Transfer tokens from one account to another, asserting the token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithTransferHook(connection, payer, source, mint, destination, authority, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(await createTransferCheckedWithTransferHookInstruction(connection, source, mint, destination, authorityPublicKey, amount, decimals, signers, confirmOptions?.commitment, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param fee            The calculated fee for the transfer fee extension\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFeeAndTransferHook(connection, payer, source, mint, destination, authority, amount, decimals, fee, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(await createTransferCheckedWithFeeAndTransferHookInstruction(connection, source, mint, destination, authorityPublicKey, amount, decimals, fee, signers, confirmOptions?.commitment, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
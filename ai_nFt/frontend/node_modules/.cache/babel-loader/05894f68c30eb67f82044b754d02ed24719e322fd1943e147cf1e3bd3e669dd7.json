{"ast":null,"code":"import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var InterestBearingMintInstruction;\n(function (InterestBearingMintInstruction) {\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));\nexport const interestBearingMintInitializeInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'),\n// TODO: Make this an optional public key\npublicKey('rateAuthority'), s16('rate')]);\nexport const interestBearingMintUpdateRateInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'), s16('rate')]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate, programId = TOKEN_2022_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n  interestBearingMintInitializeInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n    rateAuthority,\n    rate\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: rateAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  }], rateAuthority, multiSigners);\n  const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n  interestBearingMintUpdateRateInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n    rate\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
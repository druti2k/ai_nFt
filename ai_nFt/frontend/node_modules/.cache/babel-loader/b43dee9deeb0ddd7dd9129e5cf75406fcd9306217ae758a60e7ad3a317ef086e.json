{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWrappedNativeAccount = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nconst initializeAccount_js_1 = require(\"../instructions/initializeAccount.js\");\nconst syncNative_js_1 = require(\"../instructions/syncNative.js\");\nconst account_js_1 = require(\"../state/account.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\nconst createAccount_js_1 = require(\"./createAccount.js\");\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nfunction createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, nativeMint = constants_js_1.NATIVE_MINT) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return yield (0, createAccount_js_1.createAccount)(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n      const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(nativeMint, owner, false, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n      const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, nativeMint, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: associatedToken,\n        lamports: amount\n      }), (0, syncNative_js_1.createSyncNativeInstruction)(associatedToken, programId));\n      yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n      return associatedToken;\n    }\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = yield (0, account_js_1.getMinimumBalanceForRentExemptAccount)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: account_js_1.ACCOUNT_SIZE,\n      lamports,\n      programId\n    }), web3_js_1.SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: keypair.publicKey,\n      lamports: amount\n    }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, nativeMint, owner, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\nexports.createWrappedNativeAccount = createWrappedNativeAccount;\n//# sourceMappingURL=createWrappedNativeAccount.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
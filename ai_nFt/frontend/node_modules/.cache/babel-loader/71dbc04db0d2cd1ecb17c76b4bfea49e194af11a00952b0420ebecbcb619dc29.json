{"ast":null,"code":"import { Field, unpack } from '@solana/spl-token-metadata';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport { getMint } from '../../state/mint.js';\nconst getNormalizedTokenMetadataField = field => {\n  if (field === Field.Name || field === 'Name' || field === 'name') {\n    return 'name';\n  }\n  if (field === Field.Symbol || field === 'Symbol' || field === 'symbol') {\n    return 'symbol';\n  }\n  if (field === Field.Uri || field === 'Uri' || field === 'uri') {\n    return 'uri';\n  }\n  return field;\n};\nexport function updateTokenMetadata(current, key, value) {\n  const field = getNormalizedTokenMetadataField(key);\n  if (field === 'mint' || field === 'updateAuthority') {\n    throw new Error(`Cannot update ${field} via this instruction`);\n  }\n  // Handle updates to default keys\n  if (['name', 'symbol', 'uri'].includes(field)) {\n    return {\n      ...current,\n      [field]: value\n    };\n  }\n  // Avoid mutating input, make a shallow copy\n  const additionalMetadata = [...current.additionalMetadata];\n  const i = current.additionalMetadata.findIndex(x => x[0] === field);\n  if (i === -1) {\n    // Key was not found, add it\n    additionalMetadata.push([field, value]);\n  } else {\n    // Key was found, change value\n    additionalMetadata[i] = [field, value];\n  }\n  return {\n    ...current,\n    additionalMetadata\n  };\n}\n/**\n * Retrieve Token Metadata Information\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token Metadata information\n */\nexport async function getTokenMetadata(connection, address, commitment, programId = TOKEN_2022_PROGRAM_ID) {\n  const mintInfo = await getMint(connection, address, commitment, programId);\n  const data = getExtensionData(ExtensionType.TokenMetadata, mintInfo.tlvData);\n  if (data === null) {\n    return null;\n  }\n  return unpack(data);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}